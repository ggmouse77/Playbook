---
- name: Deploy ESXi ISO
  hosts: awx-exec-01
  gather_facts: yes
  vars:
    iso_path: "/user/svrauto/SA/Image/VMware-VMvisor-Installer-8.0U3e-24674464.x86_64.iso"
    image_name: "{{ Vendor }}_{{ Model }}_ESXi{{ Ver }}"
    extract_dir: "/user/svrauto/SA/ESXi/{{ image_name }}"
    mount_point: "/tmp/esxi_{{ image_name }}"
    bootcfg_path: "{{ extract_dir }}/boot.cfg"
    kickstart_url: "ks=nfs://ncfilervwp1.seccae.com/svrauto/svrauto/SA/kickstart/ESXi{{ Ver }}.cfg"

  tasks:
    - name: Check if image already exists
      ansible.builtin.stat:
        path: "{{ bootcfg_path }}"
      register: bootcfg_check

    - name: Skip if image already exists
      debug:
        msg: "Image {{ image_name }} already exists at {{ extract_dir }}"
      when: bootcfg_check.stat.exists

    - name: Create mount directory
      file:
        path: "{{ mount_point }}"
        state: directory
        mode: '0755'
      become: true
      when: not bootcfg_check.stat.exists

    - name: Mount ISO
      command: "mount -o loop {{ iso_path }} {{ mount_point }}"
      become: true
      when: not bootcfg_check.stat.exists

    - name: Create extract directory
      file:
        path: "{{ extract_dir }}"
        state: directory
        mode: '0775'
      become: true
      when: not bootcfg_check.stat.exists

    - name: Extract ISO contents
      shell: "cp -a {{ mount_point }}/. {{ extract_dir }}/"
      become: true
      when: not bootcfg_check.stat.exists

    - name: Unmount ISO
      command: "umount {{ mount_point }}"
      become: true
      when: not bootcfg_check.stat.exists

    - name: Remove temporary mount directory
      file:
        path: "{{ mount_point }}"
        state: absent
      become: true
      when: not bootcfg_check.stat.exists

    - name: Set prefix in boot.cfg
      replace:
        path: "{{ bootcfg_path }}"
        regexp: '^prefix=.*'
        replace: "prefix={{ image_name }}"
      become: true
      when: not bootcfg_check.stat.exists

    - name: Fix kernel= path
      replace:
        path: "{{ bootcfg_path }}"
        regexp: '^kernel=/'
        replace: 'kernel='
      become: true
      when: not bootcfg_check.stat.exists

    - name: Set kernelopt in boot.cfg
      replace:
        path: "{{ bootcfg_path }}"
        regexp: '^kernelopt=.*'
        replace: "kernelopt=runweasel {{ kickstart_url }}"
      become: true
      when: not bootcfg_check.stat.exists

    - name: Clean slashes in modules= line
      shell: "sed -i '/^modules=/ s|/||g' {{ bootcfg_path }}"
      become: true
      when: not bootcfg_check.stat.exists
